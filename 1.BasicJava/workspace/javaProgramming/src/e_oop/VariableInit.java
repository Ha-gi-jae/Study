package e_oop;

public class VariableInit {
// 명시적 초기화 > 초기화 블럭 > 생성자
	//명시적 초기화
	int var = 10;
	static int classVar = 20;
	
	//초기화 블럭 : 여러줄의 코드를 초기화 할 수 있다.
	{
		var = 30;//인스턴스 변수를 초기화하기 위한 블럭
	}
	
	static{
		classVar = 40; // static 변수를 초기화 하는 블럭
	}
	
	/*
	 * 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.
	 * - 생성자는 리턴타입이 없다.
	 */	
	
	VariableInit(){
		var = 50;
		
		//생성자 사용이유
		//초기화에 여러줄의 코드가 필요할 때
		//초기화에 파라미터가 필요할 때                       --  외부에서 값을 받아오겠다.
	}
	
	
	public static void main(String[] args) {
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();// 파라미터 값이 없는 Init 생성자를 만들면 컴파일러가 사라짐.
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70, 80, 90); // 객체생성 => 생성자 호출
		//70 80 90을  생성자에 있는 파라미터에 넣어준다. // new : 메모리에 공간을 만들어주고, 뒤의 객체의 주소를 만들어준다.
									  //생성자 호출 return 타입이 필요없는 이유는 객체생성할 때만 쓰기 때문.
		
	}
	
}

class Init{
	int a;
	int b;
	int c;
	
	
	Init(int a, int b, int c){
		this.a = a;
		this.b = b; //this.b 는 지역변수   ...     b 는 파라미터의 값
		this.c = c; // this = 자기 객체를 가르키는 변수 라고 생각하면 된다.
		//this : 인스턴스 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
				//우선적으로 지역변수가 쓰임.
				//this를 안붙혀야 파라미터에 있는 a b c 이다.
	}
	
	
	//오버로딩 : 같은 이름의 메서드를 여러개 정의하는 것. 타입 이나 파라미터 갯수가 달라야 오버로딩이 가능.
	Init(){
//		a = 10;
//		b = 20;
//		c = 30;
		this(10, 20, 30); //생성자에서 다른 생성자를 호출할 때 사용한다.
		//this는 첫줄에 있어야한다.
		//복잡한 로직이 두번들어갈 수 있음. 그 내용을 위에 만들어 놓고 호출해서 사용하는 방법(권장)
		//괄호 붙은것 : 생성자에서 다른 생성자를 호출 할 때.
		//안 붙은것  : 
	}
	
	
	
}